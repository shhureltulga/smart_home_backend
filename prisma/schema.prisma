// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ======================= ENUMS ======================= */

enum MemberRole {
  owner
  admin
  member
  guest
}

enum MemberStatus {
  active
  invited
  removed
}

enum DeviceType {
  light
  thermostat
  door_lock
  camera
  sensor
  fan
  tv
  air_conditioner
}

enum DeviceStatus {
  online
  offline
  maintenance
}

enum EdgeStatus {
  online
  offline
}

enum CommandStatus {
  queued
  sent
  acked
  failed
  timeout
}

/* ================== USERS / AUTH ===================== */

model User {
  id            String           @id @default(uuid())
  phoneE164     String           @unique @db.VarChar(20)
  displayName   String?
  avatarUrl     String?
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  // Password auth (optional)
  passwordHash  String?
  passwordSetAt DateTime?

  // Relations
  memberships       HouseholdMember[] @relation("UserMemberships")
  invitesSent       HouseholdMember[] @relation("InvitedBy")
  sessions          AuthSession[]
  householdsCreated Household[]       @relation("HouseholdCreatedBy")
  deviceControls    DeviceControl[]   @relation("UserDeviceControls")
}

model PhoneOtp {
  id         String    @id @default(uuid())
  phoneE164  String    @db.VarChar(20)
  codeHash   String
  purpose    String    @default("login")
  expiresAt  DateTime
  consumedAt DateTime?
  attempts   Int       @default(0)
  createdAt  DateTime  @default(now())
  lastSentAt DateTime  @default(now())

  @@index([phoneE164])
}

model AuthSession {
  id               String    @id @default(uuid())
  userId           String
  refreshTokenHash String    @unique
  userAgent        String?
  ip               String?
  createdAt        DateTime  @default(now())
  expiresAt        DateTime
  revokedAt        DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

/* ================= HOUSEHOLD / SITE ================= */

model Household {
  id          String     @id @default(uuid())
  name        String
  address     String?
  createdById String?
  createdBy   User?      @relation("HouseholdCreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  members        HouseholdMember[]
  sites          Site[]                               // 1 household → N sites
  edgeNodes      EdgeNode[]        @relation("Household_EdgeNodes")
  sensorReadings SensorReading[]   @relation(name: "Household_SensorReadings")
  latestSensors  LatestSensor[]    @relation(name: "Household_LatestSensors")
  rooms          Room[]
  devices        Device[]
}

model HouseholdMember {
  id          String       @id @default(uuid())
  householdId String
  userId      String
  role        MemberRole   @default(member)
  status      MemberStatus @default(active)
  invitedById String?

  // Relations
  household Household @relation(fields: [householdId], references: [id])
  user      User      @relation("UserMemberships", fields: [userId], references: [id])
  invitedBy User?     @relation("InvitedBy", fields: [invitedById], references: [id])

  createdAt DateTime @default(now())

  @@unique([householdId, userId])
}

model Site {
  id          String     @id @default(uuid())
  householdId String
  household   Household  @relation(fields: [householdId], references: [id], onDelete: Cascade)

  name      String       // ж: "Хотын байр", "Зуслан"
  address   String?
  createdAt DateTime     @default(now())

  // Relations
  edge     EdgeNode?     @relation("Site_Edge")  // 1:1 (EdgeNode.siteId @unique)
  rooms    Room[]
  devices  Device[]
  readings SensorReading[]
  latests  LatestSensor[]

  @@unique([householdId, name]) // нэг өрх дотор site name давхцахгүй
}

/* ======================= EDGE ======================= */

model EdgeNode {
  id           String     @id @default(uuid())

  householdId  String
  household    Household  @relation("Household_EdgeNodes", fields: [householdId], references: [id], onDelete: Cascade)

  siteId       String     @unique
  site         Site       @relation("Site_Edge", fields: [siteId], references: [id])

  // Танилцуулга / config
  edgeId       String     @unique      // Edge process-ийн ID (ж: edge_nas_01)
  name         String?
  secretHash   String?
  baseUrl      String?

  status       EdgeStatus @default(offline)
  lastSeenAt   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  commands      EdgeCommand[]
  SensorReading SensorReading[]
  LatestSensor  LatestSensor[]

  @@index([householdId])
  @@index([status, lastSeenAt])
}

model EdgeCommand {
  id        String         @id @default(uuid())
  edgeId    String
  edge      EdgeNode       @relation(fields: [edgeId], references: [id], onDelete: Cascade)

  payload   Json
  status    CommandStatus  @default(queued)
  error     String?

  createdAt DateTime       @default(now())
  sentAt    DateTime?
  ackedAt   DateTime?

  @@index([edgeId, status, createdAt])
}

/* ================== ROOMS / DEVICES ================= */

model Room {
  id          String    @id @default(uuid())
  householdId String
  siteId      String
  site        Site      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  name  String          // "Том өрөө"
  color String?
  icon  String?
  order Int             @default(0)

  // зөвшөөрөл/шүүлтэд householdId хэрэгтэй
  household Household   @relation(fields: [householdId], references: [id])

  @@unique([siteId, name]) // нэг site дотор нэр давхцахгүй
  @@index([householdId])
}

model Device {
  id          String       @id @default(uuid())
  householdId String
  siteId      String
  site        Site         @relation(fields: [siteId], references: [id], onDelete: Cascade)

  name       String
  type       DeviceType
  room       String?
  status     DeviceStatus  @default(offline)
  isOn       Boolean       @default(false)
  settings   Json?
  lastActive DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  household Household      @relation(fields: [householdId], references: [id])

  @@index([householdId])
  @@index([siteId])
  @@index([type])
}

model DeviceControl {
  id        String   @id @default(uuid())
  deviceId  String
  userId    String
  action    String
  oldValue  Json?
  newValue  Json?
  timestamp DateTime @default(now())

  user User @relation("UserDeviceControls", fields: [userId], references: [id])

  @@index([deviceId])
  @@index([userId])
}

/* ==================== SENSOR DATA =================== */

model SensorReading {
  id String @id @default(uuid())

  householdId String
  household   Household @relation(name: "Household_SensorReadings", fields: [householdId], references: [id], onDelete: Cascade)

  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  edgeId String?
  edge   EdgeNode? @relation(fields: [edgeId], references: [id])

  deviceKey String       // ж: "livingroom.temp"
  type      String?      // ж: "temperature" | "humidity" | ...
  value     Float
  ts        DateTime     @default(now())
  createdAt DateTime     @default(now())

  @@index([householdId, ts])
  @@index([siteId, deviceKey, ts])
  @@index([householdId, siteId, ts])
  @@index([householdId, edgeId, deviceKey, ts])
}

model LatestSensor {
  id String @id @default(uuid())

  householdId String
  household   Household @relation(name: "Household_LatestSensors", fields: [householdId], references: [id], onDelete: Cascade)

  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  edgeId String?
  edge   EdgeNode? @relation(fields: [edgeId], references: [id])

  deviceKey String
  type      String?
  value     Float
  ts        DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Нэг site дотор ижил deviceKey ганц мөр
  @@unique([siteId, deviceKey])
  @@index([siteId, updatedAt])
}
