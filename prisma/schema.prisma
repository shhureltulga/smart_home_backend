// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  owner
  admin
  member
  guest
}

enum MemberStatus {
  active
  invited
  removed
}

model User {
  id          String   @id @default(uuid())
  phoneE164   String   @unique @db.VarChar(20)
  displayName String?
  avatarUrl   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // üîΩ –ù—ç–º—ç–ª—Ç:
  passwordHash  String? // bcrypt hash
  passwordSetAt DateTime?

  // --- Relations (—Ç–∞–Ω—ã ”©–º–Ω”©—Ö —Ö—É–≤–∏–ª–±–∞—Ä–∞–∞—Ä) ---
  memberships       HouseholdMember[] @relation("UserMemberships")
  invitesSent       HouseholdMember[] @relation("InvitedBy")
  sessions          AuthSession[]
  householdsCreated Household[]       @relation("HouseholdCreatedBy")
}

model Household {
  id          String   @id @default(uuid())
  name        String
  address     String?
  createdById String?
  createdBy   User?    @relation("HouseholdCreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members HouseholdMember[]
}

model HouseholdMember {
  id          String       @id @default(uuid())
  householdId String
  userId      String
  role        MemberRole   @default(member)
  status      MemberStatus @default(active)
  invitedById String?

  // --- Relations ---
  household Household @relation(fields: [householdId], references: [id])
  user      User      @relation("UserMemberships", fields: [userId], references: [id])
  invitedBy User?     @relation("InvitedBy", fields: [invitedById], references: [id])

  createdAt DateTime @default(now())

  @@unique([householdId, userId])
}

model PhoneOtp {
  id         String    @id @default(uuid())
  phoneE164  String    @db.VarChar(20)
  codeHash   String
  purpose    String    @default("login")
  expiresAt  DateTime
  consumedAt DateTime?
  attempts   Int       @default(0)
  createdAt  DateTime  @default(now())
  lastSentAt DateTime  @default(now())

  @@index([phoneE164])
}

model AuthSession {
  id               String    @id @default(uuid())
  userId           String
  refreshTokenHash String    @unique
  userAgent        String?
  ip               String?
  createdAt        DateTime  @default(now())
  expiresAt        DateTime
  revokedAt        DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}
